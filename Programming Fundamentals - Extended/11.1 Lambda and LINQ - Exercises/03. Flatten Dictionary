using System;
using System.Collections.Generic;
using System.Linq;

public class DefaultValuesValues
{
    public static void Main()
    {
        var input = Console.ReadLine();
        var dictionary = new Dictionary<string,Dictionary<string, string>>();

        while (input != "end")
        {          
            var tokens = input.Split();
            
            if (tokens[0] != "flatten")
            {
                var key = tokens[0];
                var innerKey = tokens[1];
                var innerValue = tokens[2];

                if (!dictionary.ContainsKey(key))
                {
                    dictionary[key] = new Dictionary<string, string>();
                }

                dictionary[key][innerKey] = innerValue;
            }
            else
            {
                var key = tokens[1];
                dictionary[key] = dictionary[key]
                    .ToDictionary(x => x.Key + x.Value, x => "flattened");
            }
            
            input = Console.ReadLine();
        }

        var orderDictionary = dictionary
            .OrderByDescending(x => x.Key.Length)
            .ToDictionary(x => x.Key, x => x.Value);

        foreach (var item in orderDictionary)
        {
            Console.WriteLine($"{item.Key}");

            var OrderedInnerDictionary = item.Value
                .Where(x => x.Value != "flattened")
                .OrderBy(x => x.Key.Length)
                .ToDictionary(x => x.Key, x => x.Value);

            var flattened = item.Value
                .Where(x => x.Value == "flattened")
                .ToDictionary(x => x.Key, x => x.Value);

            var counter = 1;

            foreach (var item2 in OrderedInnerDictionary)
            {
                Console.WriteLine($"{counter}. {item2.Key} - {item2.Value}");
                counter++;
            }

            foreach (var item3 in flattened)
            {
                Console.WriteLine($"{counter}. {item3.Key}");
                counter++;
            }
        }   
    }
}
