using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.RegularExpressions;
using System.Collections.Generic;
using System.Globalization;

namespace CommandInterpreter
{
    class CommandInterpreter
    {
        static void Main()
        {
            var array = Console.ReadLine().Split(new char[] { ' ' }, StringSplitOptions.RemoveEmptyEntries).ToList();

            var lineComands = Console.ReadLine();
            while (lineComands != "end")
            {
                var tokens = lineComands.Split();
                var comand = tokens[0];

                switch (comand)
                {
                    case "reverse":
                        var startReverse = int.Parse(tokens[2]);
                        var endReverse = int.Parse(tokens[4]);

                        if (isValid(array, startReverse, endReverse))
                        {
                            Reverse(array, startReverse, endReverse);
                        }
                        else
                        {
                            Console.WriteLine("Invalid input parameters.");
                        }                     
                        break;
                    case "sort":
                        var startSort = int.Parse(tokens[2]);
                        var endSort = int.Parse(tokens[4]);

                        if (isValid(array, startSort, endSort))
                        {
                            Sort(array, startSort, endSort);
                        }
                        else
                        {
                            Console.WriteLine("Invalid input parameters.");
                        }
                        break;
                    case "rollLeft":
                        var countLeft = int.Parse(tokens[1]);
                        if (countLeft>=0)
                        {
                            RollLeft(array, countLeft);
                        }
                        else
                        {
                            Console.WriteLine("Invalid input parameters.");
                        }                  
                        break;
                    case "rollRight":
                        var countRight = int.Parse(tokens[1]);
                        if (countRight >= 0)
                        {
                            RollRight(array, countRight);
                        }
                        else
                        {
                            Console.WriteLine("Invalid input parameters.");
                        }
                        break;
                }
          
                lineComands = Console.ReadLine();
            }

            Console.WriteLine($"[{string.Join(", ", array)}]");
        }

        public static bool isValid(List<string> array, int start, int count)
        {
            return start >= 0 &&
                start < array.Count
                && count >= 0 
                && (start + count) <= array.Count;
        }

        public static void RollRight(List<string> array, int countRight)
        {
            var rotation = countRight % array.Count;
            for (int i = 0; i < rotation; i++)
            {
                var lastElemet = array[array.Count - 1];

                for (int j = array.Count - 1; j > 0; j--)
                {
                    array[j] = array[j - 1];
                }

                array[0] = lastElemet;
            }
        }

        public static void RollLeft(List<string> array, int countLeft)
        {
            var rotation = countLeft % array.Count;
            for (int i = 0; i < rotation; i++)
            {
                var firstElement = array.First();

                for (int j = 0; j < array.Count - 1; j++)
                {
                    array[j] = array[j + 1];
                }

                array[array.Count - 1] = firstElement;
            }          
        }

        public static void Sort(List<string> array, int startSort, int endSort)
        {        
            array.Sort(startSort, endSort, null);
        }

        public static void Reverse(List<string> array, int startReverse,int endReverse)
        {
            array.Reverse(startReverse, endReverse);
        }

       
    }

}
